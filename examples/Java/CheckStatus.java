import org.scrapy.scrapystreaming.Spider;
import org.scrapy.scrapystreaming.Logger;
import org.scrapy.scrapystreaming.core.Callback;
import org.scrapy.scrapystreaming.core.SpiderException;
import org.scrapy.scrapystreaming.Request;
import org.scrapy.scrapystreaming.messages.ResponseMessage;
import org.scrapy.scrapystreaming.messages.ReceivedMessage;
import org.scrapy.scrapystreaming.messages.ExceptionMessage;
import org.scrapy.scrapystreaming.utils.Utils;


/**
 * This example opens multiple pages and check if its running or not.
 *
 * The results are written in the Scrapy Streaming debug logger.
 */
public class CheckStatus extends Spider {

    static int responsesRemaining = 0; // counter to handle remaining responses
    CheckStatus() {
        name = "CheckStatus";
    }

    public void parse(ResponseMessage response) {
    }

    public static void main(String args[]) throws Exception {

        CheckStatus spider = new CheckStatus();
        spider.start();

        // open multiple requests, to test the following response status
        String codes[] = {"200", "201", "400", "404", "500"};

        for (String code: codes) {
            Request r = new Request("http://httpbin.org/status/" + code);
            // adds a new response to the counter
            responsesRemaining++;

            r.open(new Callback() {
                public void parse(ResponseMessage response) {
                    // if got a response, the domain is working.
                    Logger.debug(response.url + " is working");
                    responsesRemaining--;

                    if (responsesRemaining == 0)
                        spider.close();
                }
            });
        }
    }

    @Override
    public void onException(ExceptionMessage exception) throws SpiderException {
        // if got an exception, the response is not working
        //
        // firt use ReceivedMessage to get the message thant caused this problem
        ReceivedMessage rec = Utils.gson.fromJson(exception.received_message, ReceivedMessage.class);

        // if the exception was generated by an request, then
        if (rec.type.equals("request")) {
            // get the request data
            Request r = Utils.gson.fromJson(exception.received_message, Request.class);
            Logger.debug(r.url + " is not working!");
            responsesRemaining--;

            if (responsesRemaining == 0)
                close();
        } else {
            throw new SpiderException("Received an exception: " + exception);
        }
    }

}
